const mineflayer = require('mineflayer');
const { pathfinder, Movements, goals } = require('mineflayer-pathfinder');
const { GoalFollow } = goals;

function createBot() {
  const bot = mineflayer.createBot({
    host: 'GORILLA-Chill.aternos.me',
    port: 48236,
    username: 'BotCrack123',
    version: false
  });

  bot.loadPlugin(pathfinder);

  bot.on('spawn', () => {
    console.log('‚úÖ Bot ƒë√£ v√†o server!');

    const mcData = require('minecraft-data')(bot.version);
    const defaultMove = new Movements(bot, mcData);
    bot.pathfinder.setMovements(defaultMove);

    // T√¨m ng∆∞·ªùi ch∆°i g·∫ßn nh·∫•t
    const players = Object.values(bot.players).filter(p => p.entity);
    if (players.length > 0) {
      const nearest = players[0];
      console.log(`‚û°Ô∏è ƒêang ƒëi theo: ${nearest.username}`);
      const goal = new GoalFollow(nearest.entity, 1); // C√°ch 1 block
      bot.pathfinder.setGoal(goal, true);
    } else {
      console.log("‚ùó Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi ch∆°i ƒë·ªÉ ƒëi theo.");
    }

    // Anti-AFK
    setInterval(() => {
      bot.setControlState('jump', true);
      setTimeout(() => bot.setControlState('jump', false), 500);
    }, 10000);
  });

  bot.on('death', () => {
    console.log('üíÄ Bot ƒë√£ ch·∫øt! ƒêang ch·ªù respawn...');
  });

  bot.on('end', () => {
    console.log('‚ö†Ô∏è Bot b·ªã kick ho·∫∑c m·∫•t k·∫øt n·ªëi. ƒêang reconnect sau 5 gi√¢y...');
    setTimeout(createBot, 5000);
  });

  bot.on('error', (err) => {
    console.log('‚ùå L·ªói bot:', err);
  });
}

createBot();